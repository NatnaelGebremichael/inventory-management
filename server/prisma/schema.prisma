generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id         String     @id @default(uuid())
  name       String
  users      User[]
  products   Product[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
}

model User {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  email          String       @unique
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  sales          Sale[]
  purchases      Purchase[]
  expenses       Expense[]
  employment     Employment?
}

model Product {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  price          Float
  rating         Float?
  stockQuantity  Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  sales          Sale[]
  purchases      Purchase[]
  wastes         Waste[]
}

model Category {
  id                        String              @id @default(uuid())
  organizationId            String
  organization              Organization        @relation(fields: [organizationId], references: [id])
  name                      String              @unique
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  deletedAt                 DateTime?
  expenses                  Expense[]
  expenseCategoryBreakdowns ExpenseByCategory[]
}

model Sale {
  id          String    @id @default(uuid())
  productId   String
  userId      String
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  product     Product   @relation(fields: [productId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Purchase {
  id                String           @id @default(uuid())
  productId         String
  userId            String
  timestamp         DateTime
  quantity          Int
  unitCost          Float
  totalCost         Float
  paymentType       PaymentType
  dueDate           DateTime?
  isPaid            Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  product           Product          @relation(fields: [productId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  purchaseSummary   PurchaseSummary? @relation(fields: [purchaseSummaryId], references: [id])
  purchaseSummaryId String?
}

model Expense {
  id               String          @id @default(uuid())
  userId           String
  categoryId       String
  amount           Float
  timestamp        DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  user             User            @relation(fields: [userId], references: [id])
  category         Category        @relation(fields: [categoryId], references: [id])
  ExpenseSummary   ExpenseSummary? @relation(fields: [expenseSummaryId], references: [id])
  expenseSummaryId String?
}

model Waste {
  id        String    @id @default(uuid())
  productId String
  quantity  Int
  reason    String
  timestamp DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  product   Product   @relation(fields: [productId], references: [id])
}

model Employment {
  id           String    @id @default(uuid())
  userId       String    @unique
  startDate    DateTime
  contractType String
  documents    String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  user         User      @relation(fields: [userId], references: [id])
  leaves       Leave[]
}

model Leave {
  id           String      @id @default(uuid())
  employmentId String
  type         LeaveType
  startDate    DateTime
  endDate      DateTime
  status       LeaveStatus @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  employment   Employment  @relation(fields: [employmentId], references: [id])
}

model SalesSummary {
  id               String   @id @default(uuid())
  period           DateTime
  totalSales       Float
  totalQuantity    Int
  averageOrderSize Float
  sourceDataHash   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model PurchaseSummary {
  id                String     @id @default(uuid())
  period            DateTime
  totalPurchases    Float
  totalQuantity     Int
  averageOrderValue Float
  sourceDataHash    String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  purchases         Purchase[]
}

model ExpenseSummary {
  id                 String              @id @default(uuid())
  period             DateTime
  totalExpenses      Float
  sourceDataHash     String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  categoryBreakdowns ExpenseByCategory[]
  expenses           Expense[]
}

model ExpenseByCategory {
  id               String         @id @default(uuid())
  expenseSummaryId String
  categoryId       String
  amount           Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  expenseSummary   ExpenseSummary @relation(fields: [expenseSummaryId], references: [id])
  category         Category       @relation(fields: [categoryId], references: [id])
}

enum UserRole {
  ADMIN
  MEMBER
}

enum PaymentType {
  DEBT
  PAID
}

enum LeaveType {
  SICK
  ANNUAL
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}
